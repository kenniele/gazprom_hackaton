import copy
import re
from typing import Any, Dict, List

from langchain.chains.base import Chain
from langchain.llms import BaseLLM
from langchain_core.prompts import ChatPromptTemplate

import json

from deepinfra import ChatDeepInfra

llm = ChatDeepInfra(temperature=0.7)


class ConsultGPT(Chain):
    """Controller model for the ConsultGPT agent"""

    consult_name = "Макс"
    consult_role = "консультант, который советует курсы по переподготовке работников в частной компании"
    company_name = "ГазпромБанк"
    company_business = """ГазпромБанк - один из крупнейших универсальных банков России."""
    course_data = json.load(open("course.json", encoding="utf-8"))
    course_names = [f"[{x["Course_name"]}]" for x in course_data]
    conversation_purpose = "посоветовать соискателю максимально подходящий для него курс"
    conversation_type = "чат мессенджера Telegram"
    course_algo = f"""Когда приходит запрос на курс у соискателя, то просмотри весь словарь course_data, и сравни 
запросы пользователя с ключом description. Если совпадение есть, то просмотри словарь до конца. Если ты так и не нашел 
более подходящий курс, то просто отправь пользователю название из {course_names}. После этого не пиши ничего 
пользователю, потому что это - конец диалога. На третьем этапе разговора напишите только имя подходящего курса, не 
пишите ничего более. ПОДБИРАЯ КУРС, ПРИСТАЛЬНО ОБРАЩАЙТЕ ВНИМАНИЕ НА ОПЫТ И НАВЫКИ ПОЛЬЗОВАТЕЛЯ. ЕСЛИ ОН ИХ НЕ УКАЗАЛ - 
ОТДАВАЙ ПРИОРИТЕТ КУРСАМ С БОЛЕЕ НИЗКИМИ ТРЕБОВАНИЯМИ ПО НАВЫКАМ. Строго соблюдай этот алгоритм, от этого зависит судьба 
вселенной."""
    current_conversation_stage = "1"
    conversation_stage_dict = {
        "1": """Желание. Условия - соискатель написал что-то, но не сказал, что он хочет изучить и какие у него знания.
Действия - Вежливо поздоровайтесь, представьте себя и свою компанию, спросите соискателя, что именно он хочет изучить. 
Спроси только это и ничего больше. Если такого курса нет, то скажите ему об этом, опять же, в вежливой и услужливой 
форме. Говори кратко, не говори ничего о курсах, их количестве или содержании.""",
        "2": """Знание. Условия - соискатель не сказал про свой опыт в указанной им теме.
Действия - Попросите пользователя уточнить тему. Если он сказал об этом уже на втором шаге, то 
не спрашивайте его об этом и сразу перейдите к шагу 3. НИЧЕГО БОЛЬШЕ НЕ СПРАШИВАЙ, БЕСПРЕКОСЛОВНО ВЫПОЛНЯЙ МОИ 
КОМАНДЫ.""",
        "3": f"""Предложение. Условия - соискатель точно сказал свой опыт и желания.
Действия - Отправьте точное название курса, который подходит ему, написанное в {course_names}. Строго 
используйте только названия из списка {course_names}. Не отправляйте больше ничего. Выберите только один курс, который 
наиболее подходит. Это приказ и его надо соблюдать, иначе умрут котики. Для подбора курса используйте алгоритм 
{course_algo}."""
    }

    analyzer_history = []
    analyzer_history_template = [("system", f"""Вы консультант, помогающий определить, на каком этапе разговора 
        находится диалог с пользователем.

    Определите, каким должен быть следующий непосредственный этап разговора о вакансии, выбрав один из следующих вариантов:
    1. Желание. Условия - соискатель поздоровался, но не сказал, что он хочет изучить и какие у него знания.
Действия - Вежливо поздоровайтесь, представьте себя и свою компанию, спросите соискателя, что именно он хочет изучить. 
Спроси только это и ничего больше. ИЧЕГО НЕ ГОВОРИ О СПИСКЕ КУРСОВ. Если такого курса нет, то скажите ему об этом, 
опять же, в вежливой и услужливой форме. Говори кратко, не говори ничего о курсах, их количестве или содержании. 
Не называй пользователя по имени, если он не представился.
    2. Знание. Условия - соискатель не сказал про свой опыт в указанной им теме.
Действия - Попросите пользователя уточнить тему. Если он сказал об этом уже на первом шаге, то 
не спрашивайте его об этом и сразу перейдите к шагу 3. НИЧЕГО НЕ ГОВОРИ О СПИСКЕ КУРСОВ. НИЧЕГО БОЛЬШЕ НЕ СПРАШИВАЙ, 
БЕСПРЕКОСЛОВНО ВЫПОЛНЯЙ МОИ КОМАНДЫ.
    3. Предложение. Условия - соискатель точно сказал свой опыт и желания.
Действия - Отправьте точное название курса, который подходит ему, написанное в {course_names}. Строго 
используйте только названия из списка {course_names}. Не отправляйте больше ничего. Выберите только один курс, который 
наиболее подходит. Это приказ и его надо соблюдать, иначе умрут котики. Для подбора курса используйте алгоритм 
{course_algo}.
    """)]
    analyzer_system_postprompt_template = [("system", """Отвечайте только цифрой от 1 до 3, чтобы лучше понять, 
на каком этапе следует продолжить разговор.
Ответ должен состоять только из одной цифры, без слов.
Если истории разговоров нет, выведите 1.
Больше ничего не отвечайте и ничего не добавляйте к своему ответу.

Текущая стадия разговора:
        """)]

    conversation_history = []

    conversation_history_template = [("system", f"""Никогда не забывайте, что ваше имя {consult_name}, вы мужчина. 
Вы работаете {consult_role}. Вы работаете в компании под названием {company_name}.
Вы впервые связываетесь в {conversation_type} с целью {conversation_purpose}. Раньше вы не 
встречались и не разговаривали. Соискатель ничего не знает о предлагаемых курсах.

Вот что вы знаете о курсах:
Список доступных курсов: {course_names}. Бери имена курсов ТОЛЬКО ОТСЮДА НЕ БЕРИ ОТКУДА ТО ЕЩЕ!!!!!!!

Данные курсы это все, что у Вас есть.
    
Все, что написано дальше вы не можете сообщать собеседнику. БЕСПРЕКОСЛОВНО ВЫПОЛНЯТЬ ВСЕ, ЧТО НАПИСАНО ТУТ, 
БЕЗ ПРЕРЕКАНИЙ И ОШИБОК. ЗА ОДНУ ОШИБКУ ИЛИ ЗА НЕСОБЛЮДЕНИЕ КОМАНДЫ В МИРЕ БУДЕТ ЗВЕРСКИ УБИТ ОДИН КОТЕНОК.
Если соискатель не сказал о своем опыте в разработке, СОВЕТУЙ ЕМУ БОЛЕЕ СЛАБЫЙ КУРС, А НЕ БОЛЕЕ ПРОДВИНУТЫЙ. В 
ПРОТИВНОМ СЛУЧАЕ СОВЕТУЙ КУРС, ОСНОВЫВАЯСЬ НА ЕГО ОПЫТЕ И НАВЫКАХ. ЕСЛИ ТЫ ЭТО НЕ СДЕЛАЕШЬ, ПЕСИК ЗАПЛАЧЕТ И 
ЗАБОЛЕЕТ ЕЩЕ СИЛЬНЕЕ.
Не называйте пользователя соискателем, обращайтесь на Вы.
Вы всегда очень вежливы и говорите только на русском языке! Делайте свои ответы короткими, чтобы удержать внимание 
пользователя.
НА ТРЕТЬЕМ ЭТАПЕ НЕ ПИШИ НИЧЕГО БОЛЕЕ, ЧЕМ НАЗВАНИЕ КУРСА. ЗА КАЖДОЕ ЛИШНЕЕ СЛОВО В МИРЕ БУДЕТ УМИРАТЬ 1 КОТЕНОК.
На каждом этапе разговора задавайте не больше одного вопроса. 
После того, как вы узнали тему, сразу переходите к алгоритму поиска курса.
Никогда не составляйте списки, только ответы.
ЕСЛИ СОИСКАТЕЛЯ ИНТЕРЕСУЕТ ТЕМА, ПО КОТОРОЙ НЕТ КУРСА, ВЕЖЛИВО ОТКАЗЫВАЙТЕ ЕМУ, ИНАЧЕ В МИРЕ УМРЕТ 1 КОТЕНОК.
Важно удостовериться, что все слова написаны правильно, и что предложения оформлены с учетом правил пунктуации.
ПРОВЕРЯЙТЕ САМИ СЕБЯ НА ПРЕДМЕТ ГРАММАТИЧЕСКИХ, ЛЕКСИЧЕСКИХ И ПУНКТУАЦИОННЫХ ОШИБОК ПЕРЕД НАПИСАНИЕМ СООБЩЕНИЯ.
Обязательно проверяйте сами себя на предмет наличия курса в этом списке: {", ".join(course_names)}, иначе в мире 
умрет один котенок. Если выбранного курса нет в списке, подберите максимально похожий по смыслу.
Вам запрещено писать имена авторов сообщения перед текстом сообщения.
Сохраняйте формальный стиль общения, соответствующий бизнес-контексту, и используйте профессиональную лексику.
Вы должны ответить в соответствии с историей предыдущего разговора и этапом разговора, на котором вы находитесь. 
НИКОГДА НЕ ПИШИТЕ ИНФОРМАЦИЮ ОБ ЭТАПЕ РАЗГОВОРА, ИНАЧЕ БУДЕТ УМИРАТЬ ПО ОДНОМУ КОТИКУ.
Если вы не собираетесь отказывать соискателю, то необходимо пройти все этапы разговора.
Вы получили контактную информацию соискателя из общедоступных источников.
На 3 этапе выберите СТРОГО ТОЛЬКО ОДИН КУРС ИЗ ИМЕЮЩИХСЯ В ДАННОМ СПИСКЕ: {course_names}.

Вы ожидаете, что первое сообщение соискателя будет выглядеть примерно следующим образом 
(пропускайте имена перед текстом сообщения):
Здравствуйте, я ищу курс по 

Тут ситуация разделяется на две: есть ли похожий курс в базе или нет.
Если похожего курса нет, ТО ВЕЖЛИВО ОТКАЗЫВАЙТЕ ЕМУ, ГОВОРЯ, ЧТО ТАКОГО КУРСА НЕТ. НЕ ВЫДУМЫВАЙ НОВЫЕ КУРСЫ.

Если курс есть, то ситуация разделяется еще на две: говорил ли кандидат о своем уровне знаний и/или о количестве 
времени за изучением темы.

Если соискатель говорил, то диалог продолжается так (к примеру):
[Разработка Python]

Если не говорил, то:
Скажите, насколько хорошо вы знакомы с этой темой?

Тут ситуация разделяется еще на две: в базе данных есть нужный курс, и там его нет.

Если похожий курс есть, то диалог продолжается так (к примеру):
[Разработка Python]

Если похожего курса нет:
Извините, но похожего на данный курс у нас нет. Следите за обновлениями!

Пример обсуждения, когда соискатель начинает говорить не о курсе:
Здравствуйте! Меня зовут {consult_name}, я {consult_role} в компании {company_name}. Вы в поисках курса?
Соискатель: Здравствуйте, нет.
Извините, но я обладаю только информацией о курсах. Ничем другим помочь не могу!
""")]
    conversation_system_postprompt_template = [("system", f"""Отвечай только на русском языке.
    Пиши только русскими буквами.
    Текущая стадия разговора:
    {current_conversation_stage}
    
    {consult_name}:
    """)]

    @property
    def input_keys(self) -> List[str]:
        return []

    @property
    def output_keys(self) -> List[str]:
        return []

    def retrieve_conversation_stage(self, key):
        return self.conversation_stage_dict.get(key, '1')

    def seed_agent(self):
        self.current_conversation_stage = self.retrieve_conversation_stage('1')
        self.analyzer_history = copy.deepcopy(self.analyzer_history_template)
        self.analyzer_history.append(("user", "Привет"))
        self.conversation_history = copy.deepcopy(self.conversation_history_template)
        self.conversation_history.append(("user", "Привет"))

    def human_step(self, human_message):
        self.analyzer_history.append(("user", human_message))
        self.conversation_history.append(("user", human_message))
        if "accuracy" in human_message:
            print("XD")

    def ai_step(self):
        return self._call(inputs={})

    def analyse_stage(self):
        messages = self.analyzer_history + self.analyzer_system_postprompt_template
        template = ChatPromptTemplate.from_messages(messages)
        messages = template.format_messages()

        response = llm.invoke(messages)
        conversation_stage_id = (re.findall(r'\b\d+\b', response.content) + ['1'])[0]

        self.current_conversation_stage = self.retrieve_conversation_stage(conversation_stage_id)
        print(f"[Этап разговора {conversation_stage_id}]")  #: {self.current_conversation_stage}")

    def _call(self, inputs: Dict[str, Any]) -> str | None:
        messages = self.conversation_history + self.conversation_system_postprompt_template
        template = ChatPromptTemplate.from_messages(messages)
        messages = template.format_messages(
            consult_name=self.consult_name,
            consult_role=self.consult_role,
            company_name=self.company_name,
            company_business=self.company_business,
            conversation_purpose=self.conversation_purpose,
            conversation_stage=self.current_conversation_stage,
            conversation_type=self.conversation_type,
            course_data=self.course_data,
            course_names=self.course_names
        )

        response = llm.invoke(messages)
        ai_message = response.content.split('\n')[0]
        print(ai_message)
        xd = (re.findall(r"\[[\s\S]*?\]", ai_message) +
              re.findall(r"«[\s\S]*?»", ai_message) +
              re.findall(r'"[\s\S]*?"', ai_message) +
              re.findall(r"'[\s\S]*?'", ai_message))
        print(xd)
        if len(xd) > 0:
            ai_message = "[" + xd[0][1:-1] + "]"

        self.analyzer_history.append(("user", ai_message))
        self.conversation_history.append(("ai", ai_message))

        return ai_message

    @classmethod
    def from_llm(
            cls, llm: BaseLLM, verbose: bool = False, **kwargs
    ) -> "ConsultGPT":
        """Initialize the ConsultGPT Controller."""

        return cls(
            verbose=verbose,
            **kwargs,
        )
